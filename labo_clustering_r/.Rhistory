knitr::opts_chunk$set(echo = TRUE)
library(cluster)
library(MASS)
# install.packages("fpc")
library(fpc)
# install.packages("dplyr")
library(dplyr)
# install.packages("ggplot2")
library(ggplot2)
# install.packages("stringr")
library(stringr)
encuesta <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/00334/wiki4HE.csv",header=T, sep=";", stringsAsFactors = F)
dim(encuesta)
str(encuesta[1:10])
contar_na <- function(x) length(str_which(x, "\\?"))
recuento_na <- sapply(encuesta, contar_na)
sort(recuento_na, decreasing = T)
encuesta_2$GENDER <- factor( ifelse(encuesta_2$GENDER == 1, "F", "M") )
convertir_na <- function(x, na_symbol = "?"){
if(typeof(x) == "character"){
x[ x == na_symbol ] <- NA
}
return(as.numeric(x))
}
encuesta_2 <- as.data.frame( sapply(encuesta, convertir_na) )
encuesta_2$GENDER <- factor( ifelse(encuesta_2$GENDER == 1, "F", "M") )
domain_labels <- c("Arts_Humanities", "Sciences",  "Health_Sciences","Engineering_Architecture", "Law", "Political_Sciences")
encuesta_2$DOMAIN <- factor(encuesta_2$DOMAIN, labels = domain_labels  )
pos_labels =  c("Professor", "Associate", "Assistant", "Lecturer", "Instructor", "Adjunct")
encuesta_2$UOC_POSITION <- factor(encuesta_2$UOC_POSITION, labels = pos_labels)
encuesta_2$OTHERSTATUS <- factor(encuesta_2$OTHERSTATUS)
# Queda codificado como númenro porque los nombres de categorías
# no coinciden con el número de categorías
encuesta_2$UNIVERSITY <- factor( ifelse(encuesta_2$UNIVERSITY == 1, "UOC", "UPF"))
encuesta_2$PhD <- as.logical(encuesta_2$PhD)
encuesta_2$USERWIKI <- as.logical(as.numeric(encuesta_2$USERWIKI))
encuesta_2$OTHER_POSITION <- if_else(encuesta_2$OTHER_POSITION == 1, TRUE, FALSE, NA)
encuesta_uoc <- encuesta_2 %>% filter(UNIVERSITY == "UOC") %>% select(-UNIVERSITY)
table(complete.cases(encuesta_uoc))
table(sapply(encuesta_uoc, anyNA))
encuesta_uoc$OTHER_POSITION <- NULL
encuesta_uoc$Vis2 <- NULL
encuesta_uoc$PEU3 <- NULL
table(complete.cases(encuesta_uoc))
encuesta_uoc_c <- encuesta_uoc[complete.cases(encuesta_uoc), ]
uoc_personal <- encuesta_uoc_c[,1:7]
uoc_preguntas <- encuesta_uoc_c[, 8:49]
?daisy
uoc_personal_dgower <- daisy(uoc_personal, metric="gower")
plot(as.dendrogram(hclust(uoc_personal_dgower)), leaflab="none")
?pam
sse_p_pers <- array()
sil_pers <- array()
kit <- 14
for(i in 1:kit){
# Cálculo de PAM:
personal_pam <- pam(uoc_personal_dgower, i+1, diss = T)
# Determinar el ID del medoide que le corresponde a cada registro:
pers_meds <- personal_pam$medoids[personal_pam$clustering]
# Cálculo de SSEs: construir un vector que registre las distancias entre
# cada objeto y su correspondiente medoide elevadas al cuadrado, y luego
# calcular su suma. Almacenar cada SSE en un vector.
sse_p_pers[i] <- sum(as.matrix(uoc_personal_dgower)[cbind(row.names(uoc_personal), pers_meds)]^2)
# Almacenar cada valor de silhouette global
sil_pers[i] <- personal_pam$silinfo$avg.width
}
par(mfrow=c(2,1))
plot(2:(kit+1), sil_pers, type="b", xlab="k", sub="Silhouette")
plot(2:(kit+1), sse_p_pers, type="b", xlab="k", sub = "SSE")
par(mfrow=c(1,1))
personal_pam <- pam(uoc_personal_dgower, 14, diss = T)
plot(silhouette(personal_pam), main="Silhouette, k = 14")
data.frame(uoc_personal[personal_pam$medoids,], tamaño=personal_pam$clusinfo[,1])
personal_pam$isolation
clusplot(personal_pam)
# Probamos k=4
personal_pam <- pam(uoc_personal_dgower, 4, diss = T)
plot(silhouette(personal_pam))
data.frame(uoc_personal[personal_pam$medoids,], tamaño=personal_pam$clusinfo[,1])
personal_pam$isolation
clusplot(personal_pam)
buscar_eps <- apply(as.matrix(uoc_personal_dgower), 1, function(x) sort(x)[5])
plot(sort(buscar_eps), type="l")
personal_dbs_1 <- dbscan(uoc_personal_dgower, eps=0.09)
personal_dbs_1
personal_dbs_2 <- dbscan(uoc_personal_dgower, eps=0.15)
personal_dbs_2
personal_fuzz_1 <- fanny(uoc_personal_dgower, 4, diss = T, memb.exp = 1.35)
#Coeficiente de Dunnet
personal_fuzz_1$coeff
# Membresías (matriz y grupo con mayor puntaje)
head(personal_fuzz_1$membership)
head(personal_fuzz_1$clustering, 10)
# Distribución de las máximas membresías de cada registro:
hist(apply(personal_fuzz_1$membership,1, max), main="")
# ¿Cuántos registros tienen una membresía menor que 0.6?
fuzz_pers <- apply(personal_fuzz_1$membership,1, max) < 0.6
table(fuzz_pers)
# A los registros con unamembresía menor a 0.6
# los asignamos a un cluster "0", que corresponde a los
# que no agrupan claramente
fuzz_pers_col <- personal_fuzz_1$clustering
fuzz_pers_col[fuzz_pers] <- 0
uoc_personal_nmds <- isoMDS(uoc_personal_dgower + 0.0001)
uoc_personal_nmds$stress
plot(uoc_personal_nmds$points, col=personal_fuzz_1$clustering+1, pch=20)
#Cuidado: Si el ID de un cluster es cero, R no le va asignar color
plot(uoc_personal_nmds$points, col=fuzz_pers_col+1, pch=20)
preguntas_pam <- pam(uoc_preguntas, 5, metric = "euclidean")
# Quienes son los medoides
preguntas_pam$id.med
# como se agrupan los encuestados
head( preguntas_pam$clustering, 15)
# cual es el clustering que le corresponde a cada encuestado
head(preguntas_pam$medoids)
head( preguntas_pam$medoids[preguntas_pam$clustering,], 15)
vec_meds <- preguntas_pam$medoids[preguntas_pam$clustering,]
sse_vec <- array()
sil_global <- array()
for(i in 1:kit){
preguntas_pam <- pam(uoc_preguntas, i+1, metric = "euclidean", keep.diss = T)
vec_meds <- row.names(preguntas_pam$medoids)[preguntas_pam$clustering]
sse_vec[i] <- sum(as.matrix(preguntas_pam$diss)[cbind(row.names(uoc_personal),vec_meds)]^2)
sil_global[i] <- preguntas_pam$silinfo$avg.width
}
par(mfrow=c(2,1))
plot(2:(kit+1), sse_vec, xlab="k", type="b", main="SSE")
plot(2:(kit+1), sil_global, xlab="k", type="b", main="Silhouette")
par(mfrow=c(1,1))
sum(abs(uoc_preguntas[1,] - uoc_preguntas[2,])) / (ncol(uoc_preguntas)*4)
dist_enc <- matrix(NA, nrow(uoc_preguntas), nrow(uoc_preguntas))
min_dis <- ncol(uoc_preguntas)*4
mat_dat <- as.matrix(uoc_preguntas)
# El loop que sigue se podría acelerar teniendo en cuenta que el resultado
# es una matriz singular, pero para el tamaño que tiene, no haría falta
for(i in 1:nrow(mat_dat)){
for(j in 1:nrow(mat_dat)){
dist_enc[i, j] <- sum(abs(mat_dat[i,] - mat_dat[j,])) / min_dis
}
}
row.names(dist_enc) <- row.names(mat_dat)
dist_enc <- as.dist(dist_enc)
sse_p_preg_d <- array()
sil_preg_d <- array()
for(i in 1:kit){
preguntas_d_pam <- pam(dist_enc, i+1, diss = T)
vec_meds_d <- preguntas_d_pam$medoids[preguntas_d_pam$clustering]
sse_p_preg_d[i] <- sum(as.matrix(dist_enc)[cbind(row.names(uoc_preguntas), vec_meds_d)]^2)
sil_preg_d[i] <- preguntas_d_pam$silinfo$avg.width
}
par(mfrow=c(2,1))
plot(2:(kit+1), sse_p_preg_d, xlab="k", type="b", main="SSE")
plot(2:(kit+1), sil_preg_d, xlab="k", type="b", main="Silhouette")
par(mfrow=c(1,1))
preguntas_d_pam <- pam(dist_enc, 3, diss = T)
dist_enc_nmds <- isoMDS(dist_enc + 0.0001)
dist_enc_nmds$stress
plot(dist_enc_nmds$points)
plot(dist_enc_nmds$points, col=preguntas_d_pam$clustering, pch=19)
plot(dist_enc_nmds$points, col=personal_pam$clustering, pch=19)
plot(uoc_personal_nmds$points, col=preguntas_d_pam$clustering, pch=20)
table(personal_pam$clustering, preguntas_d_pam$clustering, dnn=c("grupo demográfico", "grupo de respuestas" ))
table(personal_pam$clustering, preguntas_d_pam$clustering, dnn=c("grupo demográfico", "grupo de respuestas" ))
